/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.aptech.library.management.views;

import java.util.Currency;
import java.util.List;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.kordamp.ikonli.fluentui.FluentUiRegularAL;
import org.kordamp.ikonli.fluentui.FluentUiRegularMZ;
import org.kordamp.ikonli.swing.FontIcon;

import com.aptech.library.management.models.Book;
import com.aptech.library.management.services.BookService;
import com.aptech.library.management.services.LoginService;
import com.aptech.library.management.types.Category;
import com.aptech.library.management.types.SlipStatus;
import com.formdev.flatlaf.intellijthemes.FlatArcIJTheme;

import java.awt.event.KeyEvent;
import java.net.URL;
import java.sql.Date;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.awt.Color;
import java.awt.Image;

/**
 *
 * @author hieu1
 */
public class formMain extends javax.swing.JFrame {

  /**
   * Creates new form formMain
   */
  public formMain() {
    if (LoginService.getInstance().getAdmin() == null) {
      JDialog loginDialog = new dialogLogin(this);
      loginDialog.setVisible(true);
    }

    initComponents();
    prepareIcon();
    loadData();
    imageHandling();
  }

  private void prepareIcon() {
    addIcon = FontIcon.of(FluentUiRegularAL.ADD_20, 16, Color.white);
    addBtn.setIcon(addIcon);

    clearIcon = FontIcon.of(FluentUiRegularAL.ARROW_HOOK_UP_LEFT_20, 16, new Color(50, 49, 48));
    clearBtn.setIcon(clearIcon);
    filterClearBtn.setIcon(clearIcon);
    slipFilterClearBtn.setIcon(clearIcon);

    delIcon = FontIcon.of(FluentUiRegularAL.DELETE_20, 16, Color.white);
    delBtn.setIcon(delIcon);

    coverIcon = FontIcon.of(FluentUiRegularAL.IMAGE_20, 14, Color.white);
    previewCoverBtn.setIcon(coverIcon);

    bookIcon = FontIcon.of(FluentUiRegularAL.BOOK_20, 14);
    mainTabbedPane.setIconAt(0, bookIcon);

    slipIcon = FontIcon.of(FluentUiRegularAL.DOCUMENT_ONE_PAGE_20, 14);
    mainTabbedPane.setIconAt(1, slipIcon);

    moreIcon = FontIcon.of(FluentUiRegularMZ.MORE_20, 14, Color.white);
    chooseFileBtn.setIcon(moreIcon);

    importIcon = FontIcon.of(FluentUiRegularAL.ARROW_IMPORT_20, 14, Color.white);
    importBtn.setIcon(importIcon);

    defaultImageIcon = FontIcon.of(FluentUiRegularAL.IMAGE_48, 96, new Color(96, 94, 92));

    refreshIcon = FontIcon.of(FluentUiRegularAL.ARROW_CLOCKWISE_20, 16, Color.white);
    refreshBtn.setIcon(refreshIcon);
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
  // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainTabbedPane = new javax.swing.JTabbedPane();
        booksPane = new javax.swing.JPanel();
        filterPanelLabel = new javax.swing.JLabel();
        filterNameFieldLabel = new javax.swing.JLabel();
        filterNameField = new javax.swing.JTextField();
        filterAuthorField = new javax.swing.JTextField();
        filterAuthorFieldLabel = new javax.swing.JLabel();
        filterCategoryCombobox = new javax.swing.JComboBox<>();
        filterCategoryFieldLabel = new javax.swing.JLabel();
        filterPublisherField = new javax.swing.JTextField();
        filterPublisherFieldLabel = new javax.swing.JLabel();
        filterYearField = new javax.swing.JTextField();
        filterYearFieldLabel = new javax.swing.JLabel();
        bookListPane = new javax.swing.JScrollPane();
        bookTable = new javax.swing.JTable();
        bookDetailPanel = new javax.swing.JPanel();
        mngPaneLabel = new javax.swing.JLabel();
        idField = new javax.swing.JTextField();
        idFieldLabel = new javax.swing.JLabel();
        nameFieldLabel = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        authorFieldLabel = new javax.swing.JLabel();
        authorField = new javax.swing.JTextField();
        categoryFieldLabel = new javax.swing.JLabel();
        publisherFieldLabel = new javax.swing.JLabel();
        publisherField = new javax.swing.JTextField();
        publishedFieldLabel = new javax.swing.JLabel();
        publishedField = new javax.swing.JTextField();
        quantityFieldLabel = new javax.swing.JLabel();
        quantityField = new javax.swing.JTextField();
        priceFieldLabel = new javax.swing.JLabel();
        priceField = new javax.swing.JTextField();
        rentField = new javax.swing.JTextField();
        rentFieldLabel = new javax.swing.JLabel();
        addBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        delBtn = new javax.swing.JButton();
        coverUrlField = new javax.swing.JTextField();
        urlFieldLabel = new javax.swing.JLabel();
        previewCoverBtn = new javax.swing.JButton();
        coverContainer = new javax.swing.JPanel();
        coverPlaceholder = new javax.swing.JLabel();
        chooseFileBtn = new javax.swing.JButton();
        fileNameField = new javax.swing.JTextField();
        coverFileFieldLabel = new javax.swing.JLabel();
        categoryCombobox = new javax.swing.JComboBox<>();
        importBtn = new javax.swing.JButton();
        refreshBtn = new javax.swing.JButton();
        filterClearBtn = new javax.swing.JButton();
        slipsPane = new javax.swing.JPanel();
        slipsPaneLabel = new javax.swing.JLabel();
        studentIdFieldLabel = new javax.swing.JLabel();
        filterStudentIdField = new javax.swing.JTextField();
        slipBookField = new javax.swing.JTextField();
        slipBookFieldLabel = new javax.swing.JLabel();
        slipBorrowDateField = new javax.swing.JTextField();
        slipReturnDateField = new javax.swing.JTextField();
        slipBorrowDateFieldLabel = new javax.swing.JLabel();
        slipReturnDateFieldLabel = new javax.swing.JLabel();
        slipStatusCombobox = new javax.swing.JComboBox<>();
        slipStatusComboboxLabel = new javax.swing.JLabel();
        slipScrollPane = new javax.swing.JScrollPane();
        slipTable = new javax.swing.JTable();
        filterStudentNameField = new javax.swing.JTextField();
        studentNameFieldLabel = new javax.swing.JLabel();
        slipFilterClearBtn = new javax.swing.JButton();
        slipDetailPane = new javax.swing.JPanel();
        slipDetailPaneLabel = new javax.swing.JLabel();
        slipIdFieldLabel = new javax.swing.JLabel();
        slipIdField = new javax.swing.JTextField();
        studentIdField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        bookMenuBar = new javax.swing.JMenuBar();
        bookMenu = new javax.swing.JMenu();
        dbConfigMenuItem = new javax.swing.JMenuItem();
        importCsvMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Book Management");
        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1366, 768));

        mainTabbedPane.setForeground(new java.awt.Color(50, 49, 48));
        mainTabbedPane.setFocusable(false);

        booksPane.setBackground(new java.awt.Color(255, 255, 255));

        filterPanelLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        filterPanelLabel.setText("Books management");

        filterNameFieldLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        filterNameFieldLabel.setText("Name");

        filterNameField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        filterNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterNameFieldActionPerformed(evt);
            }
        });
        filterNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                filterNameFieldKeyPressed(evt);
            }
        });

        filterAuthorField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        filterAuthorField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterAuthorFieldActionPerformed(evt);
            }
        });
        filterAuthorField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                filterAuthorFieldKeyPressed(evt);
            }
        });

        filterAuthorFieldLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        filterAuthorFieldLabel.setText("Author");

        filterCategoryCombobox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        filterCategoryCombobox.setForeground(new java.awt.Color(50, 49, 48));
        filterCategoryCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(Category.names()));
        filterCategoryCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterCategoryComboboxActionPerformed(evt);
            }
        });

        filterCategoryFieldLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        filterCategoryFieldLabel.setText("Category");

        filterPublisherField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        filterPublisherField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterPublisherFieldActionPerformed(evt);
            }
        });
        filterPublisherField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                filterPublisherFieldKeyPressed(evt);
            }
        });

        filterPublisherFieldLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        filterPublisherFieldLabel.setText("Publisher");

        filterYearField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        filterYearField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterYearFieldActionPerformed(evt);
            }
        });
        filterYearField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                filterYearFieldKeyPressed(evt);
            }
        });

        filterYearFieldLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        filterYearFieldLabel.setText("Published year");

        bookTable.setAutoCreateRowSorter(true);
        bookTable.setForeground(new java.awt.Color(50, 49, 48));
        bookTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Author", "Category", "Publisher", "Published date", "Quantity", "Price", "Rent"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        bookTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bookTable.setFocusable(false);
        bookTable.setRowHeight(24);
        bookTable.setShowHorizontalLines(true);
        bookTable.getTableHeader().setReorderingAllowed(false);
        bookTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookTableMouseClicked(evt);
            }
        });
        bookListPane.setViewportView(bookTable);
        if (bookTable.getColumnModel().getColumnCount() > 0) {
            bookTable.getColumnModel().getColumn(0).setResizable(false);
            bookTable.getColumnModel().getColumn(0).setPreferredWidth(24);
            bookTable.getColumnModel().getColumn(1).setResizable(false);
            bookTable.getColumnModel().getColumn(1).setPreferredWidth(144);
            bookTable.getColumnModel().getColumn(2).setResizable(false);
            bookTable.getColumnModel().getColumn(2).setPreferredWidth(144);
            bookTable.getColumnModel().getColumn(3).setResizable(false);
            bookTable.getColumnModel().getColumn(3).setPreferredWidth(144);
            bookTable.getColumnModel().getColumn(4).setResizable(false);
            bookTable.getColumnModel().getColumn(4).setPreferredWidth(144);
            bookTable.getColumnModel().getColumn(5).setResizable(false);
            bookTable.getColumnModel().getColumn(5).setPreferredWidth(120);
            bookTable.getColumnModel().getColumn(6).setResizable(false);
            bookTable.getColumnModel().getColumn(6).setPreferredWidth(80);
            bookTable.getColumnModel().getColumn(7).setResizable(false);
            bookTable.getColumnModel().getColumn(7).setPreferredWidth(96);
            bookTable.getColumnModel().getColumn(8).setResizable(false);
            bookTable.getColumnModel().getColumn(8).setPreferredWidth(96);
        }

        bookDetailPanel.setBackground(new java.awt.Color(255, 255, 255));

        mngPaneLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        mngPaneLabel.setForeground(new java.awt.Color(50, 49, 48));
        mngPaneLabel.setText("Add new book");

        idField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        idField.setForeground(new java.awt.Color(50, 49, 48));
        idField.setEnabled(false);

        idFieldLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        idFieldLabel.setForeground(new java.awt.Color(50, 49, 48));
        idFieldLabel.setText("Id");

        nameFieldLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        nameFieldLabel.setForeground(new java.awt.Color(50, 49, 48));
        nameFieldLabel.setText("Name");

        nameField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        nameField.setForeground(new java.awt.Color(50, 49, 48));

        authorFieldLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        authorFieldLabel.setForeground(new java.awt.Color(50, 49, 48));
        authorFieldLabel.setText("Author");

        authorField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        authorField.setForeground(new java.awt.Color(50, 49, 48));

        categoryFieldLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        categoryFieldLabel.setForeground(new java.awt.Color(50, 49, 48));
        categoryFieldLabel.setText("Category");

        publisherFieldLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        publisherFieldLabel.setForeground(new java.awt.Color(50, 49, 48));
        publisherFieldLabel.setText("Publisher");

        publisherField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        publisherField.setForeground(new java.awt.Color(50, 49, 48));
        publisherField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                publisherFieldActionPerformed(evt);
            }
        });

        publishedFieldLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        publishedFieldLabel.setForeground(new java.awt.Color(50, 49, 48));
        publishedFieldLabel.setText("Published year");

        publishedField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        publishedField.setForeground(new java.awt.Color(50, 49, 48));

        quantityFieldLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        quantityFieldLabel.setForeground(new java.awt.Color(50, 49, 48));
        quantityFieldLabel.setText("Quantity");

        quantityField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        quantityField.setForeground(new java.awt.Color(50, 49, 48));

        priceFieldLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        priceFieldLabel.setForeground(new java.awt.Color(50, 49, 48));
        priceFieldLabel.setText("Price");

        priceField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        priceField.setForeground(new java.awt.Color(50, 49, 48));

        rentField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rentField.setForeground(new java.awt.Color(50, 49, 48));

        rentFieldLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rentFieldLabel.setForeground(new java.awt.Color(50, 49, 48));
        rentFieldLabel.setText("Rent");

        addBtn.setBackground(new java.awt.Color(0, 120, 212));
        addBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        addBtn.setForeground(new java.awt.Color(255, 255, 255));
        addBtn.setIcon(addIcon);
        addBtn.setText("Add");
        addBtn.setBorderPainted(false);
        addBtn.setFocusable(false);
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        clearBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        clearBtn.setIcon(clearIcon);
        clearBtn.setText("Clear");
        clearBtn.setFocusable(false);
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        delBtn.setBackground(new java.awt.Color(216, 59, 1));
        delBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        delBtn.setForeground(new java.awt.Color(255, 255, 255));
        delBtn.setIcon(delIcon);
        delBtn.setText("Delete");
        delBtn.setBorderPainted(false);
        delBtn.setFocusable(false);
        delBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delBtnActionPerformed(evt);
            }
        });

        urlFieldLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        urlFieldLabel.setForeground(new java.awt.Color(50, 49, 58));
        urlFieldLabel.setText("Cover URL");

        previewCoverBtn.setBackground(new java.awt.Color(0, 120, 212));
        previewCoverBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        previewCoverBtn.setForeground(new java.awt.Color(255, 255, 255));
        previewCoverBtn.setBorderPainted(false);
        previewCoverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previewCoverBtnActionPerformed(evt);
            }
        });

        coverContainer.setBackground(new java.awt.Color(255, 255, 255));

        coverPlaceholder.setBackground(new java.awt.Color(255, 255, 255));
        coverPlaceholder.setBorder(new javax.swing.border.LineBorder(javax.swing.UIManager.getDefaults().getColor("Button.borderColor"), 1, true));
        coverPlaceholder.setFocusable(false);

        javax.swing.GroupLayout coverContainerLayout = new javax.swing.GroupLayout(coverContainer);
        coverContainer.setLayout(coverContainerLayout);
        coverContainerLayout.setHorizontalGroup(
            coverContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(coverPlaceholder, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        coverContainerLayout.setVerticalGroup(
            coverContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(coverPlaceholder, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        chooseFileBtn.setBackground(new java.awt.Color(0, 120, 212));
        chooseFileBtn.setBorderPainted(false);
        chooseFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFileBtnActionPerformed(evt);
            }
        });

        coverFileFieldLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        coverFileFieldLabel.setText("Cover file");

        categoryCombobox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        categoryCombobox.setForeground(new java.awt.Color(50, 49, 48));
        categoryCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(Category.names()));
        categoryCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryComboboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bookDetailPanelLayout = new javax.swing.GroupLayout(bookDetailPanel);
        bookDetailPanel.setLayout(bookDetailPanelLayout);
        bookDetailPanelLayout.setHorizontalGroup(
            bookDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookDetailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bookDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mngPaneLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(bookDetailPanelLayout.createSequentialGroup()
                        .addGroup(bookDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(bookDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(addBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(idField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(authorFieldLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(nameFieldLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(categoryFieldLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(publisherFieldLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(publishedFieldLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(quantityFieldLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(priceFieldLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(rentFieldLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(authorField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(publisherField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(publishedField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(quantityField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(priceField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(idFieldLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(rentField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(nameField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(categoryCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(bookDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(bookDetailPanelLayout.createSequentialGroup()
                                .addGroup(bookDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(bookDetailPanelLayout.createSequentialGroup()
                                        .addComponent(fileNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(chooseFileBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(bookDetailPanelLayout.createSequentialGroup()
                                        .addComponent(coverUrlField, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(previewCoverBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(coverFileFieldLabel))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(bookDetailPanelLayout.createSequentialGroup()
                                .addGroup(bookDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(bookDetailPanelLayout.createSequentialGroup()
                                        .addGroup(bookDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(urlFieldLabel)
                                            .addComponent(coverContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bookDetailPanelLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(bookDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(delBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(clearBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addContainerGap())))))
        );
        bookDetailPanelLayout.setVerticalGroup(
            bookDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookDetailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mngPaneLabel)
                .addGap(12, 12, 12)
                .addComponent(idFieldLabel)
                .addGap(8, 8, 8)
                .addGroup(bookDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(bookDetailPanelLayout.createSequentialGroup()
                        .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameFieldLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(authorFieldLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(authorField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(categoryFieldLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(categoryCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(publisherFieldLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(publisherField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(publishedFieldLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(publishedField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(coverContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bookDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(bookDetailPanelLayout.createSequentialGroup()
                        .addComponent(quantityFieldLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(quantityField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bookDetailPanelLayout.createSequentialGroup()
                        .addComponent(urlFieldLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(bookDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(previewCoverBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(coverUrlField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bookDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priceFieldLabel)
                    .addComponent(coverFileFieldLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bookDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bookDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(priceField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(chooseFileBtn))
                    .addComponent(fileNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rentFieldLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bookDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rentField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bookDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(delBtn))
                .addContainerGap(99, Short.MAX_VALUE))
        );

        bookDetailPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {addBtn, clearBtn, delBtn});

        bookDetailPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {chooseFileBtn, fileNameField, priceField});

        importBtn.setBackground(new java.awt.Color(0, 120, 212));
        importBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        importBtn.setForeground(new java.awt.Color(255, 255, 255));
        importBtn.setText("Import CSV");
        importBtn.setBorderPainted(false);
        importBtn.setFocusable(false);
        importBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importBtnActionPerformed(evt);
            }
        });

        refreshBtn.setBackground(new java.awt.Color(0, 120, 212));
        refreshBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        refreshBtn.setForeground(new java.awt.Color(255, 255, 255));
        refreshBtn.setToolTipText("Refresh");
        refreshBtn.setBorderPainted(false);
        refreshBtn.setFocusable(false);
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });

        filterClearBtn.setIcon(clearIcon);
        filterClearBtn.setToolTipText("Clear filters");
        filterClearBtn.setFocusable(false);
        filterClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterClearBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout booksPaneLayout = new javax.swing.GroupLayout(booksPane);
        booksPane.setLayout(booksPaneLayout);
        booksPaneLayout.setHorizontalGroup(
            booksPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(booksPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(booksPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(booksPaneLayout.createSequentialGroup()
                        .addGroup(booksPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filterNameFieldLabel)
                            .addComponent(filterNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(booksPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filterAuthorFieldLabel)
                            .addComponent(filterAuthorField, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(booksPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filterPublisherField, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filterPublisherFieldLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(booksPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filterCategoryFieldLabel)
                            .addComponent(filterCategoryCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(booksPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filterYearFieldLabel)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, booksPaneLayout.createSequentialGroup()
                                .addGroup(booksPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(booksPaneLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(refreshBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(booksPaneLayout.createSequentialGroup()
                                        .addComponent(filterYearField, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(filterClearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(importBtn)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                    .addGroup(booksPaneLayout.createSequentialGroup()
                        .addGroup(booksPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(booksPaneLayout.createSequentialGroup()
                                .addComponent(filterPanelLabel)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(bookListPane))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(bookDetailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        booksPaneLayout.setVerticalGroup(
            booksPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(booksPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(booksPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(booksPaneLayout.createSequentialGroup()
                        .addGroup(booksPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filterPublisherFieldLabel)
                            .addComponent(filterCategoryFieldLabel)
                            .addComponent(filterYearFieldLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(booksPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filterAuthorField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filterPublisherField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filterCategoryCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filterYearField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(filterClearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(booksPaneLayout.createSequentialGroup()
                        .addGroup(booksPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(refreshBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filterPanelLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(booksPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filterNameFieldLabel)
                            .addComponent(filterAuthorFieldLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filterNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(importBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addComponent(bookListPane)
                .addContainerGap())
            .addComponent(bookDetailPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        mainTabbedPane.addTab("Books", booksPane);

        slipsPane.setBackground(new java.awt.Color(255, 255, 255));

        slipsPaneLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        slipsPaneLabel.setText("Borrowing slips management");

        studentIdFieldLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        studentIdFieldLabel.setText("Student ID");

        slipBookFieldLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        slipBookFieldLabel.setText("Book");

        slipBorrowDateFieldLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        slipBorrowDateFieldLabel.setText("Borrow date");

        slipReturnDateFieldLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        slipReturnDateFieldLabel.setText("Return date");

        slipStatusCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(SlipStatus.names()));
        slipStatusCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                slipStatusComboboxActionPerformed(evt);
            }
        });

        slipStatusComboboxLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        slipStatusComboboxLabel.setText("Status");

        slipTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Customer", "Book", "Quantity", "Rent", "Borrow date", "Return date", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        slipScrollPane.setViewportView(slipTable);
        if (slipTable.getColumnModel().getColumnCount() > 0) {
            slipTable.getColumnModel().getColumn(0).setResizable(false);
            slipTable.getColumnModel().getColumn(0).setPreferredWidth(24);
            slipTable.getColumnModel().getColumn(1).setResizable(false);
            slipTable.getColumnModel().getColumn(2).setResizable(false);
            slipTable.getColumnModel().getColumn(3).setResizable(false);
            slipTable.getColumnModel().getColumn(4).setResizable(false);
            slipTable.getColumnModel().getColumn(5).setResizable(false);
            slipTable.getColumnModel().getColumn(6).setResizable(false);
            slipTable.getColumnModel().getColumn(7).setResizable(false);
        }

        studentNameFieldLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        studentNameFieldLabel.setText("Student name");

        slipFilterClearBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        slipFilterClearBtn.setForeground(new java.awt.Color(50, 49, 48));

        slipDetailPaneLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        slipDetailPaneLabel.setText("Add borrowing slip");

        slipIdFieldLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        slipIdFieldLabel.setForeground(new java.awt.Color(50, 49, 48));
        slipIdFieldLabel.setText("ID");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(50, 49, 48));
        jLabel1.setText("Student ID");

        javax.swing.GroupLayout slipDetailPaneLayout = new javax.swing.GroupLayout(slipDetailPane);
        slipDetailPane.setLayout(slipDetailPaneLayout);
        slipDetailPaneLayout.setHorizontalGroup(
            slipDetailPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(slipDetailPaneLabel)
            .addGroup(slipDetailPaneLayout.createSequentialGroup()
                .addGroup(slipDetailPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(slipIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(slipIdFieldLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(slipDetailPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(studentIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        slipDetailPaneLayout.setVerticalGroup(
            slipDetailPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(slipDetailPaneLayout.createSequentialGroup()
                .addComponent(slipDetailPaneLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(slipDetailPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(slipIdFieldLabel)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(slipDetailPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(slipIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(studentIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout slipsPaneLayout = new javax.swing.GroupLayout(slipsPane);
        slipsPane.setLayout(slipsPaneLayout);
        slipsPaneLayout.setHorizontalGroup(
            slipsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(slipsPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(slipsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(slipsPaneLabel)
                    .addGroup(slipsPaneLayout.createSequentialGroup()
                        .addGroup(slipsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, slipsPaneLayout.createSequentialGroup()
                                .addComponent(filterStudentIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(slipsPaneLayout.createSequentialGroup()
                                .addComponent(studentIdFieldLabel)
                                .addGap(84, 84, 84)))
                        .addGroup(slipsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(studentNameFieldLabel)
                            .addComponent(filterStudentNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(slipsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(slipBookField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(slipBookFieldLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(slipsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(slipBorrowDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(slipBorrowDateFieldLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(slipsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(slipReturnDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(slipReturnDateFieldLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(slipsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(slipsPaneLayout.createSequentialGroup()
                                .addComponent(slipStatusCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(slipFilterClearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(slipStatusComboboxLabel)))
                    .addComponent(slipScrollPane))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(slipDetailPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        slipsPaneLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {filterStudentIdField, slipBookField, slipBorrowDateField, slipReturnDateField, slipStatusCombobox});

        slipsPaneLayout.setVerticalGroup(
            slipsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(slipsPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(slipsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(slipsPaneLayout.createSequentialGroup()
                        .addComponent(slipsPaneLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(slipsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(studentIdFieldLabel)
                            .addComponent(slipBookFieldLabel)
                            .addComponent(slipReturnDateFieldLabel)
                            .addComponent(slipStatusComboboxLabel)
                            .addComponent(slipBorrowDateFieldLabel)
                            .addComponent(studentNameFieldLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(slipsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filterStudentIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(slipBookField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(slipBorrowDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(slipReturnDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(slipStatusCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filterStudentNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(slipFilterClearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(slipScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 609, Short.MAX_VALUE))
                    .addComponent(slipDetailPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        slipsPaneLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {filterStudentIdField, slipBookField, slipBorrowDateField, slipReturnDateField, slipStatusCombobox});

        mainTabbedPane.addTab("Slips", slipsPane);

        bookMenu.setForeground(new java.awt.Color(50, 49, 48));
        bookMenu.setText("Menu");

        dbConfigMenuItem.setForeground(new java.awt.Color(50, 49, 48));
        dbConfigMenuItem.setText("Database configuration");
        dbConfigMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dbConfigMenuItemActionPerformed(evt);
            }
        });
        bookMenu.add(dbConfigMenuItem);

        importCsvMenuItem.setForeground(new java.awt.Color(50, 49, 48));
        importCsvMenuItem.setText("Import data from CSV");
        importCsvMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importCsvMenuItemActionPerformed(evt);
            }
        });
        bookMenu.add(importCsvMenuItem);

        bookMenuBar.add(bookMenu);

        setJMenuBar(bookMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainTabbedPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainTabbedPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

  private void importCsvMenuItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_importCsvMenuItemActionPerformed
    importFromCSV();
  }// GEN-LAST:event_importCsvMenuItemActionPerformed

  private void dbConfigMenuItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_dbConfigMenuItemActionPerformed
    new formDb().setVisible(true);
  }// GEN-LAST:event_dbConfigMenuItemActionPerformed

  private void filterClearBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_filterClearBtnActionPerformed
    clearFilters();
  }// GEN-LAST:event_filterClearBtnActionPerformed

  private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_refreshBtnActionPerformed
    loadData();
  }// GEN-LAST:event_refreshBtnActionPerformed

  private void importBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_importBtnActionPerformed
    importFromCSV();
  }// GEN-LAST:event_importBtnActionPerformed

  private void filterCategoryComboboxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_filterCategoryComboboxActionPerformed
    loadData();
  }// GEN-LAST:event_filterCategoryComboboxActionPerformed

  private void categoryComboboxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_categoryComboboxActionPerformed
    // TODO add your handling code here:
  }// GEN-LAST:event_categoryComboboxActionPerformed

  private void slipStatusComboboxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_slipStatusComboboxActionPerformed
    // TODO add your handling code here:
  }// GEN-LAST:event_slipStatusComboboxActionPerformed

  private void chooseFileBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_chooseFileBtnActionPerformed
    importImageFromFile();
  }// GEN-LAST:event_chooseFileBtnActionPerformed

  private void previewCoverBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_previewCoverBtnActionPerformed
    try {
      String path = coverUrlField.getText();
      if (path != "") {
        URL url = new URL(path);
        BookService.downloadImage(url);
        BufferedImage image = ImageIO.read(url);
        ImageIcon icon = new ImageIcon(
            image.getScaledInstance(coverPlaceholder.getWidth(), coverPlaceholder.getHeight(), Image.SCALE_SMOOTH));
        coverPlaceholder.setIcon(icon);
      } else {
        JOptionPane.showMessageDialog(getRootPane(), "No URL provided.");
      }
    } catch (IOException ex) {
      LOGGER.error(ex);
      ex.printStackTrace();
    }
  }// GEN-LAST:event_previewCoverBtnActionPerformed

  private void delBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_delBtnActionPerformed
    deleteBook();
  }// GEN-LAST:event_delBtnActionPerformed

  private void bookTableMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_bookTableMouseClicked
    DefaultTableModel tableModel = (DefaultTableModel) bookTable.getModel();
    Long bookId = Long.parseLong(
        bookTable.getModel().getValueAt(bookTable.convertRowIndexToModel(bookTable.getSelectedRow()), 0).toString());
    fillBookForm(bookId);
  }// GEN-LAST:event_bookTableMouseClicked

  private void filterAuthorFieldKeyPressed(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_filterAuthorFieldKeyPressed
    // TODO add your handling code here:
    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
      loadData();
    }
  }// GEN-LAST:event_filterAuthorFieldKeyPressed

  private void filterCategoryFieldKeyPressed(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_filterCategoryFieldKeyPressed
    // TODO add your handling code here:
    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
      loadData();
    }
  }// GEN-LAST:event_filterCategoryFieldKeyPressed

  private void filterPublisherFieldKeyPressed(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_filterPublisherFieldKeyPressed
    // TODO add your handling code here:
    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
      loadData();
    }
  }// GEN-LAST:event_filterPublisherFieldKeyPressed

  private void filterYearFieldKeyPressed(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_filterYearFieldKeyPressed
    // TODO add your handling code here:
    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
      loadData();
    }
  }// GEN-LAST:event_filterYearFieldKeyPressed

  private void filterNameFieldKeyPressed(KeyEvent evt) {// GEN-FIRST:event_filterNameFieldKeyPressed
    // TODO add your handling code here:
    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
      loadData();
    }
  }// GEN-LAST:event_filterNameFieldKeyPressed

  private void clearBtnActionPerformed(ActionEvent evt) {// GEN-FIRST:event_clearBtnActionPerformed
    // TODO add your handling code here:
    clearForm();
  }// GEN-LAST:event_clearBtnActionPerformed

  private void loadData() {
    String name = filterNameField.getText();
    String author = filterAuthorField.getText();
    int categoryId = Category.getId(filterCategoryCombobox.getSelectedItem().toString());
    String publisher = filterPublisherField.getText();
    String publishedYear = filterYearField.getText();
    books = BookService.getInstance().getBooks(name, author, categoryId, publisher, publishedYear);

    currencyFormat.setCurrency(vnd);

    centerCellRenderer.setHorizontalAlignment(SwingConstants.CENTER);
    rightCellRenderer.setHorizontalAlignment(SwingConstants.RIGHT);
    bookTable.getColumnModel().getColumn(5).setCellRenderer(centerCellRenderer);
    bookTable.getColumnModel().getColumn(6).setCellRenderer(centerCellRenderer);
    bookTable.getColumnModel().getColumn(7).setCellRenderer(rightCellRenderer);
    bookTable.getColumnModel().getColumn(8).setCellRenderer(rightCellRenderer);

    tableModel = (DefaultTableModel) bookTable.getModel();
    tableModel.setRowCount(0);

    for (Book item : books) {
      Object[] row = {
          String.valueOf(item.getId()),
          item.getName(),
          item.getAuthor(),
          Category.getById(item.getCategory()).value(),
          item.getPublisher(),
          dateTimeFormatter.format(item.getPublishedYear()),
          item.getQuantity(),
          currencyFormat.format(item.getPrice()),
          currencyFormat.format(item.getRent())
      };
      tableModel.addRow(row);

      try {
        BookService.downloadImage(new URL(item.getCover()));
      } catch (Exception e) {
        e.printStackTrace();
        LOGGER.error(e);
      }
    }
  }

  private void imageHandling() {

  }

  private void fillBookForm(Long bookId) {
    Book book = books.stream().filter(item -> item.getId() == bookId).findFirst().get();
    this.book = book;
    this.bookId = bookId;
    mngPaneLabel.setText(book.getName().toUpperCase());
    addBtn.setText("Update");

    idField.setText(String.valueOf(book.getId()));
    nameField.setText(book.getName());
    authorField.setText(book.getAuthor());
    categoryCombobox.setSelectedIndex(book.getCategory());
    publisherField.setText(book.getPublisher());
    publishedField.setText(String.valueOf(book.getPublishedYear().format(dateTimeFormatter)));
    coverUrlField.setText(book.getCover());
    quantityField.setText(String.valueOf(book.getQuantity()));
    float price = book.getPrice();
    float rent = book.getRent();
    priceField.setText(String.valueOf(currencyFormat.format(price)));
    rentField.setText(String.valueOf(currencyFormat.format(rent)));
    coverPlaceholder.setHorizontalAlignment(SwingConstants.CENTER);

    try {
      String path = book.getCover();
      if (path != null) {
        URL coverUrl = new URL(path);
        String localUrl = BookService.getLocalUrl(coverUrl);
        BufferedImage coverBufferedImage = ImageIO.read(new File(localUrl));
        if (coverBufferedImage != null) {
          ImageIcon coverImageIcon = new ImageIcon(coverBufferedImage.getScaledInstance(coverPlaceholder.getWidth(),
              coverPlaceholder.getHeight(), Image.SCALE_SMOOTH));
          coverPlaceholder.setIcon(coverImageIcon);
        } else {
          coverPlaceholder.setIcon(defaultImageIcon);
        }
      } else {
        coverPlaceholder.setIcon(defaultImageIcon);
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  private void clearForm() {
    bookTable.getSelectionModel().clearSelection();
    mngPaneLabel.setText("Add new book");
    addBtn.setText("Add");
    idField.setText("");
    nameField.setText("");
    authorField.setText("");
    categoryCombobox.setSelectedIndex(0);
    publisherField.setText("");
    publishedField.setText("");
    quantityField.setText("");
    priceField.setText("");
    rentField.setText("");
    coverUrlField.setText("");
    coverPlaceholder.setIcon(null);
  }

  private void clearFilters() {
    filterNameField.setText("");
    filterAuthorField.setText("");
    filterPublisherField.setText("");
    filterCategoryCombobox.setSelectedIndex(0);
    filterYearField.setText("");

    loadData();
  }

  private void addBook() {
    try {
      long id = 0;
      String name = nameField.getText();
      String author = authorField.getText();
      int categoryId = Category.getId(categoryCombobox.getSelectedItem().toString());
      String publisher = publisherField.getText();
      LocalDate publishedYear = LocalDate.parse(publishedField.getText(), dateTimeFormatter);
      String cover = coverUrlField.getText();
      int quantity = Integer.parseInt(quantityField.getText());
      float price = Float.parseFloat(priceField.getText());
      float rent = Float.parseFloat(rentField.getText());
      Book newBook = new Book(id, name, author, categoryId, publisher, publishedYear, cover, quantity, price, rent);
      boolean inserted = BookService.getInstance().insertBook(newBook);

      if (inserted) {
        this.loadData();
        clearForm();
        JOptionPane.showMessageDialog(getRootPane(), "Inserted new book successfully!");
      } else {
        JOptionPane.showMessageDialog(getRootPane(), "Insert book failed.");
      }
    } catch (NumberFormatException exception) {
      exception.printStackTrace();
      JOptionPane.showMessageDialog(getRootPane(), exception.getLocalizedMessage());
    }
  }

  private void importImageFromFile() {
    JFileChooser imageChooser = new JFileChooser();
    FileNameExtensionFilter filter = new FileNameExtensionFilter("Images", "jpg", "png", "gif", "bmp");

    imageChooser.setFileFilter(filter);

    int returnVal = imageChooser.showOpenDialog(getRootPane());

    if (returnVal == JFileChooser.APPROVE_OPTION) {
      File imageFile = imageChooser.getSelectedFile();
      int confirm = JOptionPane.showConfirmDialog(getRootPane(), "Are you sure to use this image as cover?", null,
          JOptionPane.YES_NO_OPTION);

      if (confirm == JOptionPane.NO_OPTION)
        return;

      String imagePath = BookService.importLocalImage(imageFile);

      LOGGER.info("Importing " + imagePath);

      fileNameField.setText(imagePath);
    }
  }

  private void importFromCSV() {
    int returnVal = fileChooser.showOpenDialog(getRootPane());

    if (returnVal == JFileChooser.APPROVE_OPTION) {
      File file = fileChooser.getSelectedFile();
      int confirm = JOptionPane.showConfirmDialog(getRootPane(),
          "Are you sure to import data from " + file.getAbsolutePath() + "?",
          "Confirm import", JOptionPane.YES_NO_OPTION);

      if (confirm == JOptionPane.NO_OPTION) {
        return;
      }

      int results[] = BookService.getInstance().importFromCSV(file);

      if (results.length > 0) {
        this.loadData();
        JOptionPane.showMessageDialog(getRootPane(), "Successfully imported " + results.length + " items.");
      } else {
        JOptionPane.showMessageDialog(getRootPane(), "Data import failed. Please check file content format.",
            "Import failed", JOptionPane.ERROR_MESSAGE);
      }

    } else {
      return;
    }
  }

  private void updateBook() {
    try {
      if (this.book == null) {
        JOptionPane.showMessageDialog(getRootPane(), "Please select a book.");
        System.out.println(this.book == null);
        return;
      }

      this.book.setName(nameField.getText());
      this.book.setAuthor(authorField.getText());
      this.book.setCategory(Category.getId(categoryCombobox.getSelectedItem().toString()));
      this.book.setPublisher(publisherField.getText());
      this.book.setPublishedYear(LocalDate.parse(publishedField.getText(), dateTimeFormatter));
      this.book.setCover(coverUrlField.getText());
      this.book.setQuantity(Integer.parseInt(quantityField.getText()));
      try {
        this.book.setPrice(Float.parseFloat(currencyFormat.parse(priceField.getText()).toString()));
      } catch (NumberFormatException e) {
        e.printStackTrace();
        this.book.setPrice(Float.parseFloat(priceField.getText()));
      }
      this.book.setRent(Float.parseFloat(currencyFormat.parse(rentField.getText()).toString()));

      boolean updated = BookService.getInstance().updateBook(book);

      if (updated) {
        this.loadData();
        clearForm();
        JOptionPane.showMessageDialog(getRootPane(), "Book updated successfully.");
      } else {
        JOptionPane.showMessageDialog(getRootPane(), "Book update failed.");
      }

    } catch (Exception exception) {
      exception.printStackTrace();
    }
  }

  private void deleteBook() {
    try {
      if (this.book == null) {
        JOptionPane.showMessageDialog(getRootPane(), "Please select a book.");
        System.out.println(this.book == null);
        return;
      }

      int confirm = JOptionPane.showConfirmDialog(getRootPane(), "Are you sure to delete" + this.book.getName() + "?",
          "Are you sure to delete " + this.book.getName() + "?", JOptionPane.YES_NO_OPTION);

      if (confirm == JOptionPane.NO_OPTION) {
        return;
      }

      boolean deleted = BookService.getInstance().deleteBook(this.book.getId());

      if (deleted) {
        this.loadData();
        JOptionPane.showMessageDialog(getRootPane(), "Book deleted successfully!");
      } else {
        JOptionPane.showMessageDialog(getRootPane(), "Book delete failed.");
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  private void addCover() {
    try {
      if (this.book == null) {
        JOptionPane.showMessageDialog(getRootPane(), "Please select a book.");
        return;
      }

      this.book.setCover(coverUrlField.getText());
    } catch (Exception e) {
      // TODO: handle exception
    }
  }

  private void filterNameFieldActionPerformed(ActionEvent evt) {// GEN-FIRST:event_filterNameFieldActionPerformed
    // TODO add your handling code here:
  }// GEN-LAST:event_filterNameFieldActionPerformed

  private void filterAuthorFieldActionPerformed(ActionEvent evt) {// GEN-FIRST:event_filterAuthorFieldActionPerformed
    // TODO add your handling code here:
  }// GEN-LAST:event_filterAuthorFieldActionPerformed

  private void filterCategoryFieldActionPerformed(ActionEvent evt) {// GEN-FIRST:event_filterCategoryFieldActionPerformed
    // TODO add your handling code here:
  }// GEN-LAST:event_filterCategoryFieldActionPerformed

  private void filterPublisherFieldActionPerformed(ActionEvent evt) {// GEN-FIRST:event_filterPublisherFieldActionPerformed
    // TODO add your handling code here:
  }// GEN-LAST:event_filterPublisherFieldActionPerformed

  private void filterYearFieldActionPerformed(ActionEvent evt) {// GEN-FIRST:event_filterYearFieldActionPerformed
    // TODO add your handling code here:
  }// GEN-LAST:event_filterYearFieldActionPerformed

  private void publisherFieldActionPerformed(ActionEvent evt) {// GEN-FIRST:event_publisherFieldActionPerformed
    // TODO add your handling code here:
  }// GEN-LAST:event_publisherFieldActionPerformed

  private void addBtnActionPerformed(ActionEvent evt) {// GEN-FIRST:event_addBtnActionPerformed
    // TODO add your handling code here:
    if (bookTable.getSelectionModel().isSelectionEmpty()) {
      addBook();
    } else {
      updateBook();
    }
  }// GEN-LAST:event_addBtnActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    try {
      UIManager.setLookAndFeel(new FlatArcIJTheme());
      UIManager.put("TabbedPane.selectedBackground", Color.white);
      UIManager.put("TabbedPane.selectedForeground", new Color(0, 120, 212));
      UIManager.put("Button.arc", 4);
      UIManager.put("Component.arc", 4);
      UIManager.put("CheckBox.arc", 4);
      UIManager.put("ProgressBar.arc", 4);
      UIManager.put("TextComponent.arc", 4);
      UIManager.put("ScrollBar.showButtons", false);
      UIManager.put("ScrollBar.width", 8);
      UIManager.put("ScrollBar.thumbInsets", new java.awt.Insets(2, 2, 2, 2));
      UIManager.put("ScrollBar.thumbArc", 2);
      UIManager.put("ScrollBar.thumb", new Color(0, 120, 210));
      UIManager.put("ScrollBar.track", new Color(255, 255, 255));
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(formLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    // </editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new formMain().setVisible(true);
      }
    });
  }

  private static final Logger LOGGER = LogManager.getLogger();
  private List<Book> books;
  private Long bookId = 0L;
  private Book book;
  private DefaultTableModel tableModel;
  private DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
  private DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
  private Currency vnd = Currency.getInstance("VND");
  private NumberFormat currencyFormat = NumberFormat.getCurrencyInstance();
  private DefaultTableCellRenderer centerCellRenderer = new DefaultTableCellRenderer();
  private DefaultTableCellRenderer rightCellRenderer = new DefaultTableCellRenderer();
  private JFileChooser fileChooser = new JFileChooser();

  // Icon variables
  private FontIcon addIcon;
  private FontIcon clearIcon;
  private FontIcon delIcon;
  private FontIcon coverIcon;
  private FontIcon bookIcon;
  private FontIcon slipIcon;
  private FontIcon moreIcon;
  private FontIcon importIcon;
  private FontIcon defaultImageIcon;
  private FontIcon refreshIcon;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JTextField authorField;
    private javax.swing.JLabel authorFieldLabel;
    private javax.swing.JPanel bookDetailPanel;
    private javax.swing.JScrollPane bookListPane;
    private javax.swing.JMenu bookMenu;
    private javax.swing.JMenuBar bookMenuBar;
    private javax.swing.JTable bookTable;
    private javax.swing.JPanel booksPane;
    private javax.swing.JComboBox<String> categoryCombobox;
    private javax.swing.JLabel categoryFieldLabel;
    private javax.swing.JButton chooseFileBtn;
    private javax.swing.JButton clearBtn;
    private javax.swing.JPanel coverContainer;
    private javax.swing.JLabel coverFileFieldLabel;
    private javax.swing.JLabel coverPlaceholder;
    private javax.swing.JTextField coverUrlField;
    private javax.swing.JMenuItem dbConfigMenuItem;
    private javax.swing.JButton delBtn;
    private javax.swing.JTextField fileNameField;
    private javax.swing.JTextField filterAuthorField;
    private javax.swing.JLabel filterAuthorFieldLabel;
    private javax.swing.JComboBox<String> filterCategoryCombobox;
    private javax.swing.JLabel filterCategoryFieldLabel;
    private javax.swing.JButton filterClearBtn;
    private javax.swing.JTextField filterNameField;
    private javax.swing.JLabel filterNameFieldLabel;
    private javax.swing.JLabel filterPanelLabel;
    private javax.swing.JTextField filterPublisherField;
    private javax.swing.JLabel filterPublisherFieldLabel;
    private javax.swing.JTextField filterStudentIdField;
    private javax.swing.JTextField filterStudentNameField;
    private javax.swing.JTextField filterYearField;
    private javax.swing.JLabel filterYearFieldLabel;
    private javax.swing.JTextField idField;
    private javax.swing.JLabel idFieldLabel;
    private javax.swing.JButton importBtn;
    private javax.swing.JMenuItem importCsvMenuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTabbedPane mainTabbedPane;
    private javax.swing.JLabel mngPaneLabel;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameFieldLabel;
    private javax.swing.JButton previewCoverBtn;
    private javax.swing.JTextField priceField;
    private javax.swing.JLabel priceFieldLabel;
    private javax.swing.JTextField publishedField;
    private javax.swing.JLabel publishedFieldLabel;
    private javax.swing.JTextField publisherField;
    private javax.swing.JLabel publisherFieldLabel;
    private javax.swing.JTextField quantityField;
    private javax.swing.JLabel quantityFieldLabel;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JTextField rentField;
    private javax.swing.JLabel rentFieldLabel;
    private javax.swing.JTextField slipBookField;
    private javax.swing.JLabel slipBookFieldLabel;
    private javax.swing.JTextField slipBorrowDateField;
    private javax.swing.JLabel slipBorrowDateFieldLabel;
    private javax.swing.JPanel slipDetailPane;
    private javax.swing.JLabel slipDetailPaneLabel;
    private javax.swing.JButton slipFilterClearBtn;
    private javax.swing.JTextField slipIdField;
    private javax.swing.JLabel slipIdFieldLabel;
    private javax.swing.JTextField slipReturnDateField;
    private javax.swing.JLabel slipReturnDateFieldLabel;
    private javax.swing.JScrollPane slipScrollPane;
    private javax.swing.JComboBox<String> slipStatusCombobox;
    private javax.swing.JLabel slipStatusComboboxLabel;
    private javax.swing.JTable slipTable;
    private javax.swing.JPanel slipsPane;
    private javax.swing.JLabel slipsPaneLabel;
    private javax.swing.JTextField studentIdField;
    private javax.swing.JLabel studentIdFieldLabel;
    private javax.swing.JLabel studentNameFieldLabel;
    private javax.swing.JLabel urlFieldLabel;
    // End of variables declaration//GEN-END:variables
}
